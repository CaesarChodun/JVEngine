package demos;

import static org.lwjgl.vulkan.KHRSwapchain.VK_KHR_SWAPCHAIN_EXTENSION_NAME;
import static org.lwjgl.vulkan.VK10.*;

import org.lwjgl.glfw.GLFWKeyCallback;

import static org.lwjgl.glfw.GLFW.*;

import core.employees.LogicalDevice;
import core.employees.PhysicalDevice;
import core.employees.Window;
import core.managers.EngineVersioning;
import core.managers.HardwareManager;
import core.managers.Util;

/**
 * <h5>Description:</h5>
 * <p>Class for testing vulkan/moltenVK installation and setup.</p>
 * @author Cezary Chodu≈Ñ
 *
 */
public class InitializationDemo {
	
	private static Window window;
	private static PhysicalDevice physicalDevice;
	private static LogicalDevice logicalDevice;

	/**
	 * <h5>Description:</h5>
	 * <p>Initialize resources, and checks for hardware and software compatibility.</p>
	 */
	private static void init() {
		EngineVersioning.initResources("InitializationDemo", 1, 0, 0);
		
		HardwareManager.initialize();
		HardwareManager.createDefaultInstance();
		HardwareManager.enumeratePhysicalDevices();
		
		physicalDevice = HardwareManager.devices[0];
		physicalDevice.acquireProperties(HardwareManager.getInstance());
		
		String[] extensions = new String[1];
		extensions[0] = VK_KHR_SWAPCHAIN_EXTENSION_NAME;
		
		String[] validationLayers = new String[2];
		validationLayers[0] = "VK_LAYER_LUNARG_standard_validation";
		validationLayers[1] = "VK_LAYER_LUNARG_object_tracker";
		
		logicalDevice = Util.createLogicalDevice(physicalDevice, VK_QUEUE_GRAPHICS_BIT, validationLayers, extensions);
		
		glfwDefaultWindowHints();
		glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
		glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE);
		glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
		window = new Window("Initialization demo");
		
		GLFWKeyCallback exitCall = new GLFWKeyCallback() {

			@Override
			public void invoke(long window, int key, int scancode, int action, int mods) {
				if(action != GLFW_RELEASE)
					return;
				if(key == GLFW_KEY_ESCAPE)
					glfwSetWindowShouldClose(window, true);
			}
		};
		glfwSetKeyCallback(window.getWindowID(), exitCall);
		
		window.setVisible(true);
	}
	
	/**
	 * <h5>Description:</h5>
	 * <p>Manages GLFW events.</p>
	 */
	private static void loop() {
		while(!glfwWindowShouldClose(window.getWindowID()))
			glfwPollEvents();
	}
	
	/**
	 * <h5>Description:</h5>
	 * <p>Destroys contents generated by <code>init()</code> method.</p>
	 */
	private static void destroy() {
		physicalDevice.destroyProperties();
		vkDestroyDevice(logicalDevice, null);
		EngineVersioning.destroy();
	}
	
	public static void main(String[] args) {
		
		init();
		loop();
		destroy();
	}
}
